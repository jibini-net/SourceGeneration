/* DO NOT EDIT THIS FILE */
#nullable disable
namespace Generated;
public class SiteUser
{
    public int suID { get; set; }
    public string suEmail { get; set; }
        = "";
    public string suFirstName { get; set; }
        = "";
    public string suLastName { get; set; }
        = "";
    public bool suActive { get; set; }
        = true;
    public bool suLocked { get; set; }
    public DateTime? suLastLogin { get; set; }
    public partial class WithPassword : SiteUser
    {
        public string suPasswordHash { get; set; }
    }
    public partial class WithPermissions : SiteUser
    {
        public List<Permission> user_perms { get; set; }
            = new();
        public List<string> user_roles { get; set; }
            = new() { "Guest" };
    }

    public class ResetToken
    {
        public Guid suPasswordReset { get; set; }
    }

    public class Repository
    {
        //TODO Code to inject database service interface
        public SiteUser dbo__SiteUser_GetByID(int suID)
        {
            //TODO Code to read results from proc
            return default;
            //return db.Execute<SiteUser>("dbo.SiteUser_GetByID", new { 
            //    suID
            //});
        }
        public SiteUser dbo__SiteUser_Set(int suID,string suEmail,string suFirstName,string suLastName,bool suActive,bool suLocked)
        {
            //TODO Code to read results from proc
            return default;
            //return db.Execute<SiteUser>("dbo.SiteUser_Set", new { 
            //    suID,
            //    suEmail,
            //    suFirstName,
            //    suLastName,
            //    suActive,
            //    suLocked
            //});
        }
        public void dbo__SiteUser_Delete(int suID)
        {
            //TODO Code to execute void-result proc
            //db.Execute("dbo.SiteUser_Delete", new { 
            //    suID
            //});
        }
        public SiteUser.WithPassword dbo__SiteUser_GetWithPassword(string suEmail)
        {
            //TODO Code to read results from proc
            return default;
            //return db.Execute<SiteUser.WithPassword>("dbo.SiteUser_GetWithPassword", new { 
            //    suEmail
            //});
        }
        public SiteUser.WithPermissions dbo__SiteUser_GetWithPermissions(int suID)
        {
            //TODO Code to read results from proc as json
            return default;
            //return db.Execute<SiteUser.WithPermissions>("dbo.SiteUser_GetWithPermissions", new { 
            //    suID
            //});
        }
        public SiteUser.ResetToken dbo__SiteUser_ResetPassword(string suEmail)
        {
            //TODO Code to read results from proc
            return default;
            //return db.Execute<SiteUser.ResetToken>("dbo.SiteUser_ResetPassword", new { 
            //    suEmail
            //});
        }
    }
    public interface IService
    {
        SiteUser.WithPermissions AttemptLogin(string suEmail,string password);
        SiteUser.ResetToken ResetPassword(string suEmail);
    }
    public interface IBackendService : IService
    {
        // Implement and inject this interface as a separate service
    }
    public class DbService : IService
    {
        //TODO Inject database wrapper service
        private readonly IBackendService impl;
        public DbService(IBackendService impl)
        {
            this.impl = impl;
        }
        public SiteUser.WithPermissions AttemptLogin(string suEmail,string password)
        {
            //TODO Code to execute via DB wrapper
            return /*wrapper.Execute<SiteUser.WithPermissions>(() => */impl.AttemptLogin(
                  suEmail,
                  password
                  )/*)*/;
        }
        public SiteUser.ResetToken ResetPassword(string suEmail)
        {
            //TODO Code to execute via DB wrapper
            return /*wrapper.Execute<SiteUser.ResetToken>(() => */impl.ResetPassword(
                  suEmail
                  )/*)*/;
        }
    }
    public class ApiService : IService
    {
        //TODO Inject HTTP client service
        public ApiService()
        {
        }
        public SiteUser.WithPermissions AttemptLogin(string suEmail,string password)
        {
            //TODO Code to execute via API client
            return default;
            //return api.Execute<SiteUser.WithPermissions>("SiteUser/AttemptLogin", new {
            //    suEmail,
            //    password
            //});
        }
        public SiteUser.ResetToken ResetPassword(string suEmail)
        {
            //TODO Code to execute via API client
            return default;
            //return api.Execute<SiteUser.ResetToken>("SiteUser/ResetPassword", new {
            //    suEmail
            //});
        }
    }
}
