@using Jibini.CommonUtil.DataStructures
@page "/"

<PageTitle>FSA Generation Demo</PageTitle>

<center>

    <div class="d-flex flex-row" style="width: fit-content;">
        <div class="my-auto">
            <h2 class="mt-3">FSA Generation Demo</h2>
        </div>
        @*
        <div class="d-flex flex-column justify-content-center ms-5 py-4">
            <h5>Step Through</h5>
            <input type="checkbox" @bind="@_hold" @bind:after="CheckHoldAsync" id="hold" />
            <label for="hold" style="font-size: 0.8rem;" class="my-auto">Hold</label>
            <button class="btn btn-@(hold ? "" : "outline-")primary mt-2" disabled="@(!hold)"
                onclick="@(async () =>
                {
                    try
                    {
                        holdGate.Release();
                    } catch (Exception)
                    {
                    }
                })">Step</button>
        </div>
        *@
    </div>

    <h1 style="font-family: monospace;" class="my-5">
        @foreach (var (c, i) in regex.Select((it, i) => (it, i)))
        {
            if (highlightedIndex == i)
            {
                <span style="color: lightgrey;">@c</span>
            } else
            {
                <span>@c</span>
            }
        }
    </h1>
    <h3 class="mt-2 mb-5 fw-bold">@title</h3>

    @if (partitions.Count > 0)
    {
        <h1 class="d-flex justify-content-center mb-3" style="width: 100%;"><i class="spinner-border my-auto me-2" /> @partitions.SelectMany((it) => it).Count() <i class="oi oi-arrow-right mx-2" /> @partitions.Count</h1>
    }

    @if (wip is not null)
    {
        <div class="d-flex flex-row" style="margin-bottom: 1rem;width: fit-content;">
            
            <FsaNetwork Grammar="@wip" Highlight="@building" Partitions="@partitions2" />
            
            @if (partitions.Count == 0)
            {
                
                <div class="ms-3 ps-3" style="font-size: 0.8rem;border-left: 1px dotted darkgrey;">

                    <div class="d-flex flex-row mb-1">
                        <div class="p-2 me-1" style="background: green;"></div>
                        <span class="my-auto">Accept State</span>
                    </div>

                    <div class="d-flex flex-row mb-1">
                        <div class="p-2 me-1" style="background: lightgrey;"></div>
                        <span class="my-auto">Frontier</span>
                    </div>

                    <div class="d-flex flex-row mb-1">
                        <div class="p-2 me-1" style="background: #d76666;"></div>
                        <span class="my-auto">Removed from Frontier</span>
                    </div>

                    <div class="d-flex flex-row mb-1">
                        <div class="p-2 me-1" style="background: #71cb6f;"></div>
                        <span class="my-auto">Added to Frontier</span>
                    </div>

                    <div class="d-flex flex-row mb-1">
                        <div class="p-2 me-1" style="background: blue;"></div>
                        <span class="my-auto">Cyclic/Irregular Edge</span>
                    </div>

                </div>

            }

        </div>
    }

    <div style="width: fit-content;margin-bottom: 4rem;">

        <FsaNetwork Grammar="@Grammar" Highlight="@visiting" Partitions="@partitions" />
    
    </div>
    @foreach (var bR in buildRoots.Distinct().Where((it) => it != Grammar))
    {
        <div style="width: fit-content;margin-bottom: 4rem;">

            <FsaNetwork Grammar="@bR" Highlight="@visiting" Partitions="@partitions" />

        </div>
    }

</center>

@code {
    private Fsa Grammar = new();
    private Fsa wip;
    private HashSet<Fsa> visiting = new();
    private HashSet<Fsa> building = new();
    private string[] regexes = new[]
    {
        "SELECT|[a-b][a-b1-2]*|FROM",
        "[+\\-]?([1-2]+L?|[1-2]*\\.[1-2]+[fd])",
        "0(b([01][01])+|x([A-B][A-B])+)[Lu]?"
    };
    private int regexIndex;
    private string regex => regexes[regexIndex];
    bool toggle;
    private int highlightedIndex;
    private string title;
    private SemaphoreSlim holdMutex = new(1, 1);
    private SemaphoreSlim holdGate = new(1, 1);
    private bool _hold, hold;
    private List<List<Fsa>> partitions = new();
    private List<List<Fsa>> partitions2 = new();

    private readonly List<Fsa> buildRoots = [];
    private readonly HashSet<Fsa> seenBefore = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        for (;; regexIndex++, regexIndex %= regexes.Length)
        {
            async Task checkIfHeldAsync(int noHold)
            {
                await holdMutex.WaitAsync();
                if (hold)
                {
                    await holdGate.WaitAsync();
                } else
                {
                    await Task.Delay(noHold);
                }
                holdMutex.Release();
            }

            title = "1) Parse regex to NFA";
            await InvokeAsync(StateHasChanged);

            var nfa = Grammar = new Fsa();
            await nfa.Build(regex, 1, async (i, from, to) =>
            {
                highlightedIndex = i;

                buildRoots.Remove(to);
                foreach (var n in nfa.Flat)
                {
                    seenBefore.Add(n);
                }
                foreach (var n in buildRoots.SelectMany((it) => it.Flat))
                {
                    seenBefore.Add(n);
                }
                if (!seenBefore.Contains(from))
                {
                    buildRoots.Insert(0, from);
                }


                await InvokeAsync(StateHasChanged);

                await checkIfHeldAsync(220);
            }, (fsa) =>
            {
                foreach (var n in fsa.Flat)
                {
                    buildRoots.Remove(n);
                }
                _ = InvokeAsync(StateHasChanged);
            });
            buildRoots.Clear();
            seenBefore.Clear();

            await Task.Delay(3200);

            title = "2) Convert NFA to DFA";
            await InvokeAsync(StateHasChanged);

            wip = await nfa.ConvertToDfa(async (queue, fsa) =>
            {
                wip = fsa;
                visiting = queue.SelectMany((it) => it.closure).ToHashSet();
                building = queue.Select((it) => it.node).ToHashSet();
                await InvokeAsync(StateHasChanged);

                await checkIfHeldAsync(330);
            });
            await InvokeAsync(StateHasChanged);

            await Task.Delay(1200);
            building.Clear();
            visiting.Clear();
            Grammar = wip;
            wip = null;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2100);

            title = "3) Minimize states";
            await InvokeAsync(StateHasChanged);

            wip = await Grammar.MinimizeDfa(async (parts, parts2, fsa) =>
            {
                partitions = parts;
                partitions2 = parts2;
                wip = fsa;
                await InvokeAsync(StateHasChanged);

                await checkIfHeldAsync(1100);
            });
            partitions.Clear();
            partitions2.Clear();

            await Task.Delay(2400);
            Grammar = wip;
            wip = null;

            title = "4) Maintain DFA to match tokens";
            await InvokeAsync(StateHasChanged);

            await Task.Delay(3400);
            highlightedIndex = 0;
        }
    }

    private async Task CheckHoldAsync()
    {
        await holdMutex.WaitAsync();
        hold = _hold;
        if (hold)
        {
            await holdGate.WaitAsync();
        } else
        {
            try
            {
                holdGate.Release();
            } catch (Exception)
            {
            }
        }
        holdMutex.Release();
    }
}
