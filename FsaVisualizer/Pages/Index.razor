@using SourceGenerator
@page "/"
@using static SourceGenerator.Token

<PageTitle>FSA Generation Demo</PageTitle>

<center>

    <div class="d-flex flex-row" style="width: fit-content;">
        <div class="my-auto">
            <h2 class="mt-3">FSA Generation Demo</h2>
            <h3>@title</h3>
        </div>
        <div class="d-flex flex-column justify-content-center ms-5 py-4">
            <h5>Step Through</h5>
            <input type="checkbox" @bind="@_hold" @bind:after="CheckHoldAsync" id="hold" />
            <label for="hold" style="font-size: 0.8rem;" class="my-auto">Hold</label>
            <button class="btn btn-@(hold ? "" : "outline-")primary mt-2" disabled="@(!hold)"
                onclick="@(async () =>
                {
                    try
                    {
                        holdGate.Release();
                    } catch (Exception)
                    {
                    }
                })">Step</button>
        </div>
    </div>

    <h1 style="font-family: monospace;" class="my-5">
        @foreach (var (c, i) in regex.Select((it, i) => (it, i)))
        {
            if (highlightedIndex == i)
            {
                <span style="color: lightgrey;">@c</span>
            } else
            {
                <span>@c</span>
            }
        }
    </h1>

    @if (wip is not null)
    {
        <div class="d-flex flex-row" style="margin-bottom: 1rem;width: fit-content;">
            <FsaNetwork Grammar="@wip" Highlight="@building" />
            <div class="ms-3 ps-3" style="font-size: 0.8rem;border-left: 1px dotted darkgrey;">

                <div class="d-flex flex-row mb-1">
                    <div class="p-2 me-1" style="background: green;"></div>
                    <span class="my-auto">Accept State</span>
                </div>

                <div class="d-flex flex-row mb-1">
                    <div class="p-2 me-1" style="background: lightgrey;"></div>
                    <span class="my-auto">Frontier</span>
                </div>

                <div class="d-flex flex-row mb-1">
                    <div class="p-2 me-1" style="background: #d76666;"></div>
                    <span class="my-auto">Removed from Frontier</span>
                </div>

                <div class="d-flex flex-row mb-1">
                    <div class="p-2 me-1" style="background: #71cb6f;"></div>
                    <span class="my-auto">Added to Frontier</span>
                </div>

                <div class="d-flex flex-row mb-1">
                    <div class="p-2 me-1" style="background: blue;"></div>
                    <span class="my-auto">Cyclic/Irregular Edge</span>
                </div>

            </div>
        </div>
    }

    <div style="width: fit-content;">
        <FsaNetwork Grammar="@Grammar" Highlight="@visiting" />
    </div>

</center>

@code {
    private Fsa Grammar = new();
    private Fsa wip;
    private HashSet<Fsa> visiting = new();
    private HashSet<Fsa> building = new();
    private string regex = "i|like|to|code|,|that|much|should|be|apparent";
    bool toggle;
    private int highlightedIndex;
    private string title;
    private SemaphoreSlim holdMutex = new(1, 1);
    private SemaphoreSlim holdGate = new(1, 1);
    private bool _hold, hold;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        while (true)
        {
            title = "1) Parse regex to NFA";
            await InvokeAsync(StateHasChanged);

            var nfa = Grammar = new Fsa();
            await nfa.Build(regex, 1, async (i) =>
            {
                highlightedIndex = i;
                await InvokeAsync(StateHasChanged);

                await holdMutex.WaitAsync();
                if (hold)
                {
                    await holdGate.WaitAsync();
                } else
                {
                    await Task.Delay(40);
                }
                holdMutex.Release();
            });

            title = "2) Convert NFA to DFA";
            await InvokeAsync(StateHasChanged);

            Grammar = await nfa.ConvertToDfa(async (queue, fsa) =>
            {
                wip = fsa;
                visiting = queue.SelectMany((it) => it.closure).ToHashSet();
                building = queue.Select((it) => it.node).ToHashSet();
                await InvokeAsync(StateHasChanged);

                await holdMutex.WaitAsync();
                if (hold)
                {
                    await holdGate.WaitAsync();
                } else
                {
                    await Task.Delay(60);
                }
                holdMutex.Release();
            });

            title = "3) Maintain DFA to match tokens";
            wip = null;
            await InvokeAsync(StateHasChanged);

            await Task.Delay(2000);
            if (toggle = !toggle)
            {
                regex = "ant(|(eater)+|hill|hem)|car(|pet|pool)|animal+";
            } else
            {
                regex = "darn|dang(|nabbit| it)|((oh, )+|)heck(|!)|(oh, |)(sugar|shoot)";
            }
            highlightedIndex = 0;
        }
    }

    private async Task CheckHoldAsync()
    {
        await holdMutex.WaitAsync();
        hold = _hold;
        if (hold)
        {
            await holdGate.WaitAsync();
        } else
        {
            try
            {
                holdGate.Release();
            } catch (Exception)
            {
            }
        }
        holdMutex.Release();
    }
}
