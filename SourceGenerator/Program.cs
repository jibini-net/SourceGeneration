using SourceGenerator.Grammar;
using System.Diagnostics;

namespace SourceGenerator;

using static Token;

internal class Program
{
    public static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.Error.WriteLine("Usage: SourceGenerator.exe {CallingPath}");
            Process.GetCurrentProcess().Kill();
        }
        var callingPath = args[0];

        var letters = "a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z";
        var capLetters = letters.ToUpperInvariant();
        var numbers = "0|1|2|3|4|5|6|7|8|9";
        var cSharpType = "\\<|\\>|\\[|\\]|\\.|\\?";
        var word = $"({letters}|{capLetters}|_)+(|({letters}|{capLetters}|{numbers}|{cSharpType}|_)+)";

        var nfa = new Fsa();
        nfa.Build("schema",         (int)Schema);
        nfa.Build("partial",        (int)Partial);
        nfa.Build("repo",           (int)Repo);
        nfa.Build("service",        (int)Service);
        nfa.Build(word,             (int)Ident);
        nfa.Build("\\{",            (int)LCurly);
        nfa.Build("\\}",            (int)RCurly);
        nfa.Build("\\(",            (int)LParen);
        nfa.Build("\\)",            (int)RParen);
        nfa.Build("\\,",            (int)Comma);
        nfa.Build("\\.\\.\\.",      (int)Splat);
        nfa.Build("\\=",            (int)Assign);
        nfa.Build("\\=\\>",         (int)Arrow);
        nfa.Build("( |\n|\r|\t)+",  9999);

        Console.WriteLine("/* DO NOT EDIT THIS FILE */");
        Console.WriteLine("#nullable disable");
        Console.WriteLine("namespace Generated;");

        foreach (var file in Directory.GetFiles(Path.Combine(callingPath, "Models"))
            .Where((it) => it.EndsWith(".model")))
        {
            var source = new TokenStream()
            {
                Source = File.ReadAllText(file),
                Grammar = nfa
            };

            var modelName = Path.GetFileNameWithoutExtension(file);
            Console.WriteLine($"public class {modelName}");
            Console.WriteLine("{");

            try
            {
                _TopLevel.Match(source, modelName);
            } catch (Exception ex)
            {
                int lineNumber = 1, prevLine = 0;
                for (int i = 0;
                    i <= source.Offset && i < source.Source.Length;
                    i++)
                {
                    if (source.Source[i] == '\n')
                    {
                        lineNumber++;
                        prevLine = i;
                    }
                }

                Console.Error.WriteLine("{0}:{1}:{2} - {3}",
                    file,
                    lineNumber,
                    source.Offset - prevLine + 1,
                    ex.Message);
                Process.GetCurrentProcess().Kill();
            }

            Console.WriteLine("}");
        }
    }
}
