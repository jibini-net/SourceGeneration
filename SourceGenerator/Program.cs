using SourceGenerator.Grammar;
using System.Diagnostics;

namespace SourceGenerator;

internal class Program
{
    public static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.Error.WriteLine("Usage: SourceGenerator.exe {CallingPath}");
            Process.GetCurrentProcess().Kill();
        }
        var callingPath = args[0];

        var letters = "a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z";
        var capLetters = letters.ToUpperInvariant();
        var numbers = "0|1|2|3|4|5|6|7|8|9";
        var word = $"({letters}|{capLetters}|_)+(|({letters}|{capLetters}|{numbers}|_)+)";

        var nfa = new Fsa();
        nfa.Build(word,             1);
        nfa.Build("( |\n|\r|\t)+",  9999);

        Console.WriteLine("/* DO NOT EDIT THIS FILE */");
        Console.WriteLine("namespace Generated;");
        
        foreach (var file in Directory.GetFiles(Path.Combine(callingPath, "Models")))
        {
            var source = new TokenStream()
            {
                Source = File.ReadAllText(file),
                Grammar = nfa
            };

            var className = Path.GetFileNameWithoutExtension(file);
            Console.WriteLine($"public class {className}");
            Console.WriteLine("{");

            TopLevel.Match(source);

            Console.WriteLine("}");
        }
    }
}
