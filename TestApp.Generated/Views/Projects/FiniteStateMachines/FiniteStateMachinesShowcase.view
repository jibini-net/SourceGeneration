state {
}

interface {
}

inject({TestApp.Services.ILinkPathGenerator} {links})
inject({TestApp.Services.IResourceInliner} {inliner})
parent({ProjectsPage} {page})

AnchorHeading(|
	name = {"Finite State Automata"},
	id = {"fsas"},
	headerText = {"Finite State Automata and Lexing-Parsing"}
	|)

Drawer drawer(| startOpen = {page?.Get<string>("openDrawer") == "Finite State Automata"} |
	<>
	h4(| class = {"mt-5"} |
		<">Finite State Machines</">
		i(| style = {"font-size: 0.9rem;"} |
			unsafe({"&nbsp;"})
			<">& lexing-parsing</">
		)
	)

	hr()

	div(|
		id = {"fsa-preview"},
		class = {"ms-3 mb-3"}
		|

		SeoExclude(
			iframe(| src = {links.GetNamed("Fsa")} |)
		)
		i(| id = {"fsa-caption"} |
			<">(above: construction and minimization of a finite state automaton; </">
			a(|
				href = {links.GetNamed("Fsa")},
				target = {"_blank"},
				title = {"Open in new tab"}
				|
				<">View Full Size </">
				i(| class = {"fas fa-external-link-alt"} |)
			)
			<">)</">
		)
		a(|
			href = {links.GetNamed("Fsa")},
			target = {"_blank"},
			id = {"fsa-link"},
			title = {"Open in new tab"}
			|
			h3(| class = {"fas fa-external-link-alt"} |)
		)

	)

	p(
		<">
		My descriptor language parser applies top-down recursive descent using a custom
		implementation of regular expression.
		</">
	)
	p(
		<">
		Patterns can be specified with a subset of the Basic Regular Expression
		language (BRE) and are adapted to a node representation.
		</">
	)
	c(
		pre(| class = {"code-preview"} |
<">var nfa = new Fsa();
nfa.Build("(a|b|c)+",   (int)Token1);
nfa.Build("int|long",   (int)Token2);
nfa.Build("{|}",        (int)Token3);
...</">
		)
	)

	if({drawer.GetNullable<bool>("open") ?? drawer.Get<bool>("startOpen")}

		<>
		p(
			<">
			Furthermore, several Nondeterministic Finite Automata (NFAs) can be formed from
			several regex expressions to match a corresponding set of tokens in a language.
			</">
		)
		p(| class = {"my-4"} |
			<">
			All possible tokens which can be matched by the state machine are knit
			into one NFA, which can be used to match tokens as-is (using non-deterministic
			breadth-first evaluation of the NFA)
			</">
		)
		c(
			pre(| class = {"code-preview"} |
<">var (token, match) = nfa.Search(source, offset);</">
			)
		)

		p(
			<">
			or further optimized using DFA conversion
			and equivalence partioning.
			</">
		)
		c(
			pre(| class = {"code-preview"} |
<">var dfa = nfa.ConvertToDfa().MinimizeDfa();
var (token, match) = dfa.Search(source, offset);</">
			)
		)

		p(| class = {"mt-4"} |
			<">
			Usage of the machine will resemble that of tools such as (F)lex. Matched
			tokens can be passed off to a parsing algorithm (e.g., LALR(1)), or a developer
			may opt to implement recursive descent parsing by manually analyzing tokens.
			</">
		)
		p(| class = {"mb-4"} |
			<">
			Perhaps the token "if" is found, so the following code is invoked to match a
			statement in source:
			</">
		)

		div(| class = {"alert alert-info mb-2"} |
			i(| class = {"fa fa-file me-2"} |)
			a(|
				href = {links.GetNamed("Fsa.cs")},
				target = {"_blank"}
				|
				<">Fsa.cs</">
			)
			unsafe({"&mdash;"})
			<">Implementation of regular expression and lexing</">
		)

		div(| class = {"alert alert-info mb-2"} |
			i(| class = {"fa fa-file me-2"} |)
			a(|
				href = {links.GetNamed("TokenStream.cs")},
				target = {"_blank"}
				|
				<">TokenStream.cs</">
			)
			unsafe({"&mdash;"})
			<">Wrapper for searching an input source text token-by-token</">
		)

		hr()

		c(
			pre(| class = {"code-preview"} |
				{await inliner.PreLoad(links.GetNamed("RecursiveDescentDemo.cs"))}
			)
		)

		p(| class = {"mt-4"} |
			<">
			More grammar can follow at any level of complexity supported by the
			chosen parsing methodology.
			</">
		)
		</>
	)
	</>
)
