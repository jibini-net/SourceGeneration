state {
}

interface {
}

inject({TestApp.Services.ILinkPathGenerator} {links})
inject({TestApp.Services.IResourceInliner} {inliner})

p(| class = {"mt-2"} |
	<">
	Declarative, reactive components are defined in ".view" files. They are
	descriptions of HTML segments which can be reused, nested, and composed to
	create larger complex views. As the user interacts with a web page, the
	browser makes calls to the backend to render new HTML and react to user
	actions.
	</">
)
p(
	<">
	Each component has a set of state variables which are remembered during the
	component's lifetime, and a set of functions the browser can invoke to cause
	updates.
	</">
)

div (| class = {"row"} |
	div(| class = {"col-12 col-sm-6"} |

		strong(<">State definition</">)
		c(
			pre(| class = {"code-preview"} |
<">state {
	int count,
	bool enabled = {true},
	string firstName = {""},
	...
}</">
			)
		)

	)
	div(| class = {"col-12 col-sm-6"} |
	
		strong(<">Actions definition</">)
		c(
			pre(| class = {"code-preview"} |
<">interface {
	Increment(),
	Decrement(),
	Add(int amount),
	...
}</">
			)
		)

	)
)

p(
	<">
	Then give the component a body.
	</">
)

c(
	pre(|
		class = {"code-preview"},
		style = {"font-size: 11pt;"}
		|
		unsafe({await inliner.PreLoad(links.GetNamed("UpDownDemo.view.html"))})
	)
)

p(
	<">
	Business logic and event handlers are written in C# running in the backend.
	HTML content is automatically swapped out by the </">
	code({"dispatch(el, action, args)"})
	<"> function written in JS.
	</">
)

center(
	div(|
		class = {"card my-3 border-dark shadow"},
		style = {"width: fit-content;"}
		|
		div(| class = {"card-header"} |

			<">UpDownDemo.view</">

		)
		div(| class = {"card-body px-5"} |

			UpDownDemo()

		)
	)
)
