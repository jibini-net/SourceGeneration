state {
}

interface {
}

inject({TestApp.Services.ILinkPathGenerator} {links})
parent({ProjectsPage} {page})

if({page?.Get<string>("openDrawer") == "Source Generation"}

	<>
	h1(|
		style = {"opacity: 0;position: absolute;display: block;height: 0;"},
		id = {"source-gen"}
		|
		{"Source Generation"}
	)
	script(
		unsafe(<">
			$(() =>
			{
				if (document.headerFocused != (document.headerFocused = true))
				{
					document.getElementById("source-gen").scrollIntoView();
				}
			});
			</">)
	)
	</>
)

Drawer drawer(| startOpen = {page?.Get<string>("openDrawer") == "Source Generation"} |
	<>
	div(|
		class = {"d-flex flex-row"},
		style = {"width: 100%;"}
		|
		h4(| class = {"my-auto"} |
			{"Source Generation"}
		)
		a(|
			href = {links.GetNamed("SourceGenerationRepo")},
			target = {"_blank"},
			class = {"btn btn-outline-light ms-auto"}
			|
			h5(| class = {"mb-0"} |
				i(| class = {"fab fa-github me-2"} |)
				{"Repo"}
			)
		)
	)
	hr()
	p(
		<">
		Generated code allows developers to skip over tedium and keep focused
		on important design details.
		</">
	)
	p(| class = {"mb-4"} |
		<">
		My source generation platform aims to establish a definitive .NET project
		architecture of declarative descriptor languages. Several backend and
		frontend tasks follow patterns which can be boilerplated from a source
		descriptor document.
		</">
	)
	if ({drawer.GetNullable<bool>("open") ?? drawer.Get<bool>("startOpen")}

		<>
		SourceGenTabs()
		p(| class = {"my-4"} |
			<">
			The developer can build large portions of the application codebase from
			fewer succinct lines leveraging structured generation patterns.
			</">
		)
		</>

		div(| style = {"height: 4.5rem;overflow: hidden;pointer-events: none;"} |
			SourceGenTabs()
		)
	)
	</>
)
