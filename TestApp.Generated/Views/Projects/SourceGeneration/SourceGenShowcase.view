state {
}

interface {
}

inject({TestApp.Services.ILinkPathGenerator} {links})
parent({ProjectsPage} {page})

AnchorHeading(|
	name = {"Source Generation"},
	id = {"source-gen"}
	|)

Drawer drawer(| startOpen = {page?.Get<string>("openDrawer") == "Source Generation"} |
	<>
	div(|
		class = {"d-flex flex-row"},
		style = {"width: 100%;"}
		|
		h4(| class = {"my-auto"} |
			<">Source Generation</">
		)
		a(|
			href = {links.GetNamed("SourceGenerationRepo")},
			target = {"_blank"},
			class = {"btn btn-outline-light ms-auto"}
			|
			h5(| class = {"mb-0"} |
				i(| class = {"fab fa-github me-2"} |)
				<">Repo</">
			)
		)
	)

	hr()

	p(
		<">
		Generated code allows developers to skip over tedium and keep focused
		on important design details.
		</">
	)
	p(| class = {"mb-4"} |
		<">
		My source generation platform aims to establish a definitive .NET project
		architecture of declarative descriptor languages. Several backend and
		frontend tasks follow patterns which can be boilerplated from a source
		descriptor document.
		</">
	)

	if({drawer.GetNullable<bool>("open") ?? drawer.Get<bool>("startOpen")}

		<>
		SourceGenTabs()

		p(| class = {"mt-4 mb-4"} |
			<">
			The developer can build large portions of the application codebase from
			succinct lines leveraging structured generation patterns.
			</">
		)

		h5(<">Language Server with Visual Studio integration</">)
		center(
			ImageView(|
				src = {"images/sg/language-server.png"},
				alt = {"Language server and Visual Studio 2022"},
				style = {"max-width: 100%;height: auto;"},
				clazz = {"mt-4 mb-2"}
				|)
			br()
			i(| class = {"mb-5"} |
				<">(above: source generation language server running next to Visual Studio 2022)</">
			)
		)
		p(| class = {"mb-5"} |)

		h5(<">Syntax highlighting and validation</">)
		center(
			ImageView(|
				src = {"images/sg/vs-view-highlighting.png"},
				alt = {"Custom syntax highlighting"},
				style = {"max-width: 100%;height: auto;"},
				clazz = {"mt-4 mb-2"}
				|)
			br()
			i(| class = {"mb-5"} |
				<">(above: custom syntax highlighting extension with semantic colors)</">
			)
		)
		center(
			ImageView(|
				src = {"images/sg/syntax-invalid.png"},
				alt = {"Rudimentary syntax error messages"},
				style = {"max-width: 100%;height: auto;"},
				clazz = {"mt-4 mb-2"}
				|)
			br()
			i(| class = {"mb-5"} |
				<">(above: simple validation messages for syntax correctness)</">
			)
		)
		p(| class = {"mb-4"} |)
		</>

		div(| style = {"position: relative;"} |

			div(|
				style = {"position: absolute;z-index: 1;width: 100%;height: 12.5rem;cursor: pointer;"
					+ "background: linear-gradient(0deg, rgba(255,255,255,0.2) 0%, rgb(119 119 119 / 15%) 19%, rgba(255,255,255,0) 100%);"},
				onclick = {"dispatch(this.closest('._Drawer'), 'Toggle');"},
				title = {"Click for more"}
				|)

			div(| style = {"height: 12.5rem;overflow: hidden;pointer-events: none;"} |
				SourceGenTabs()
			)

		)
	)
	</>
)
