namespace Generated;

using System.Text.Json;

public interface IModelDbAdapter
{
    Task ExecuteAsync(string procName, object args);
    Task<T> ExecuteAsync<T>(string procName, object args);
    Task<T> ExecuteForJsonAsync<T>(string procName, object args);
}

public interface IModelApiAdapter
{
    Task ExecuteAsync(string path, object args);
    Task<T> ExecuteAsync<T>(string path, object args);
}

public interface IModelDbWrapper
{
    Task ExecuteAsync(Func<Task> impl);
    Task<T> ExecuteAsync<T>(Func<Task<T>> impl);
}

public interface IRenderView
{
	Task<string> RenderAsync(StateDump state, int indexByTag = 0);
	Dictionary<string, object> GetState();
	void LoadState(Dictionary<string, object> state);
}

//TODO Key field
public class StateDump
{
	public string Tag { get; set; }
	public Dictionary<string, object> State { get; set; } = new();
	public List<StateDump> Children { get; set; } = new();

	public StateDump GetOrAddChild(string tag, int indexByTag)
	{
		var result = Children
			.Where((it) => it.Tag == tag)
			.Skip(indexByTag)
			.FirstOrDefault();
		if (result is null)
		{
			result = new()
			{
				Tag = tag
			};
			Children.Add(result);
		}
		return result;
	}
}

public static class Extensions
{
	public static T ParseIfNot<T>(this object o)
	{
		if (o is null)
		{
			return default;
		}
		if (o is JsonElement json && typeof(T) != typeof(JsonElement))
		{
			return JsonSerializer.Deserialize<T>(json);
		}
		return (T)o;
	}

	public static async Task<string> RenderPageAsync(this IRenderView view, StateDump state = null)
	{
		state ??= new();
		var html = await view.RenderAsync(state);
		//var stateComment = ...;
		return html;
	}
}
