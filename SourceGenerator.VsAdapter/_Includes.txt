namespace Generated;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Web;

public interface IModelDbAdapter
{
    Task ExecuteAsync(string procName, object args);
    Task<T> ExecuteAsync<T>(string procName, object args);
    Task<T> ExecuteForJsonAsync<T>(string procName, object args);
}

public interface IModelApiAdapter
{
    Task ExecuteAsync(string path, object args);
    Task<T> ExecuteAsync<T>(string path, object args);
}

public interface IModelDbWrapper
{
    Task ExecuteAsync(Func<Task> impl);
    Task<T> ExecuteAsync<T>(Func<Task<T>> impl);
}

public interface IRenderView
{
	Task<string> RenderAsync(StateDump state, int indexByTag = 0);
	Dictionary<string, object> GetState();
	void LoadState(Dictionary<string, object> state);
}

public class TagIndex
{
	public string Tag { get; set; }
	public int IndexByTag { get; set; }
}

public class TagRenderRequest
{
	public StateDump State { get; set; }
	public List<TagIndex> Path { get; set; }
	public JsonElement Pars { get; set; }
}

//TODO Key field
public class StateDump
{
	[JsonIgnore]
	public StateDump Parent { get; private set; }
	public string Tag { get; set; }
	public Dictionary<string, object> State { get; set; } = new();
	public List<StateDump> Children { get; set; } = new();

	public StateDump GetOrAddChild(string tag, int indexByTag)
	{
		var result = Children
			.Where((it) => it.Tag == tag)
			.Skip(indexByTag)
			.FirstOrDefault();
		if (result is null)
		{
			result = new()
			{
				Tag = tag
			};
			Children.Add(result);
		}
		result.Parent = this;
		return result;
	}

	public StateDump FindParent(string tag)
	{
		for(var temp = Parent;
			temp is not null;
			temp = temp.Parent)
		{
			if (temp.Tag == tag)
			{
				return temp;
			}
		}
		return null;
	}
}

public static class Extensions
{
	public static T ParseIfNot<T>(this object o)
	{
		if (o is null)
		{
			return default;
		}
		if (o is JsonElement json && typeof(T) != typeof(JsonElement))
		{
			return JsonSerializer.Deserialize<T>(json);
		}
		return (T)o;
	}

	public static async Task<string> RenderPageAsync(this IRenderView view, StateDump state = null)
	{
		state ??= new();

		view.LoadState(state.State);
		var html = await view.RenderAsync(state);

		var stateJson = JsonSerializer.Serialize(state);
		var stateComment = $"<!--{HttpUtility.HtmlEncode(stateJson).Replace("&quot;", "\"")}-->";
		return html + stateComment;
	}
	
	public static async Task<string> RenderComponentAsync<T>(this T view, StateDump state, List<TagIndex> target, Func<T, Task> config)
		where T : IRenderView
	{
		state ??= new();
		
		var subState = state;
		foreach (var step in target)
		{
			subState = subState.GetOrAddChild(step.Tag, step.IndexByTag);
		}
		view.LoadState(subState.State);
		await config(view);
		var html = await view.RenderAsync(subState);
		
		var stateJson = JsonSerializer.Serialize(state);
		var stateComment = $"<!--{HttpUtility.HtmlEncode(stateJson).Replace("&quot;", "\"")}-->";
		return html + stateComment;
	}
}
